# -*- coding: UTF-8 -*-
# kate: syntax Python;

import os
import re

from pology.report import error
from pology.msgreport import warning_on_msg
from pology.gtxtools import msgfilter, msgfmt
from pology.uiref import resolve_ui, resolve_ui_docbook4
from pology.resolve import resolve_alternatives_simple
from pology.fsops import collect_catalogs
from pology.lang.sr.wconv import hictoec, hictoel, hictoic, hictoil
from pology.lang.sr.accents import resolve_agraphs as resolve_agraphs_t
from pology.lang.sr.charsets import limit_to_isocyr, limit_to_isolat


wrenvar = "WESNOTH_REPO"
WESVCS = os.getenv(wrenvar)
if not WESVCS:
    error("environment variable %s not set to "
          "local Wesnoth code repository path" % wrenvar)
if not os.path.isdir(WESVCS):
    error("local Wesnoth code repository path '%s' "
          "is not a directory" % WESVCS)

S.lang = "sr"
S.over_templates = True

S.summit = dict(
    topdir=S.relpath("catalogs"),
)

S.branches = [
    dict(
        id="devel",
        topdir=os.path.join(WESVCS, "trunk", "po"),
        by_lang=S.lang,
    ),
    #dict(
        #id="stable",
        #topdir=os.path.join(WESVCS, "branches", "1.8", "po"),
        #by_lang=S.lang,
    #),
]

S.mappings = [
]

S.summit_wrap = False
S.branches_wrap = True
S.summit_fine_wrap = False # no structural markup in Wesnoth
S.branches_fine_wrap = False # no structural markup in Wesnoth

lmod = "latin"
imod = "ijekavian"
ilmod = "ijekavianlatin"
vmods = [lmod, imod, ilmod]

if "gather" not in S.opmodes:
    # Add variant branches.
    branches_mod = []
    for branch in S.branches:
        branches_mod.append(branch)
        for vmod in vmods:
            lbranch = branch.copy()
            lbranch["id"] = "%s@%s" % (branch["id"], vmod)
            lbranch["by_lang"] = "%s@%s" % (branch["by_lang"], vmod)
            branches_mod.append(lbranch)
    S.branches = branches_mod
    # Add variant mappings.
    mappings_mod = []
    for mapping in S.mappings:
        mappings_mod.append(mapping)
        for vmod in vmods:
            mappings_mod.append(("%s@%s" % (mapping[0], vmod),) + mapping[1:])
    S.mappings = mappings_mod

S.vivify_w_translator = "Simulacrum"
S.vivify_w_langteam = "Serbian"
S.vivify_w_plurals = (
    "nplurals=4; plural=n==1 ? 3 : n%10==1 && n%100!=11 ? "
    "0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;")

# Create new branch catalogs on scatter only if complete enough.
S.scatter_min_completeness = 0.9

# Clear branch catalogs on scatter if not acceptably complete.
S.scatter_acc_completeness = 0.8

# ----------------------------------------
# Resolve accent graphs.

def hook_resolve_agraphs (msgstr, msg, cat):

    return resolve_agraphs_t(msgstr)


# ----------------------------------------
# Dehybridization.

def hook_to_ekcyr (msgstr, msg, cat):

    return hictoec(msgstr)


def hook_to_eklat (msgstr, msg, cat):

    return hictoel(msgstr)


def hook_to_ijcyr (msgstr, msg, cat):

    return hictoic(msgstr)


def hook_to_ijlat (msgstr, msg, cat):

    return hictoil(msgstr)


# ----------------------------------------
# Limit character set.

def hook_limit_to_isocyr (msgstr, msg, cat):

    return limit_to_isocyr(msgstr)


def hook_limit_to_isolat (msgstr, msg, cat):

    return limit_to_isolat(msgstr)


# ----------------------------------------
# Remove obsolete messages.

def hook_remove_obsolete (cat):

    for msg in cat:
        if msg.obsolete:
            cat.remove_on_sync(msg)


# ----------------------------------------
# Convert from and to embedded contexts.

def hook_embedded_to_msgctxt (msg, cat):

    if "^" in msg.msgid:
        msg.msgctxt, msg.msgid = msg.msgid.split("^", 1)


def hook_msgctxt_to_embedded (msg, cat):

    if msg.msgctxt is not None:
        msg.msgid = "%s^%s" % (msg.msgctxt, msg.msgid)
        msg.msgctxt = None


# ----------------------------------------
# Branch and catalog selectors.

# NOTE: These checks are dirty, but should do just fine.
def is_ekcyr_branch (bid):
    return imod not in bid and lmod not in bid
def is_eklat_branch (bid):
    return imod not in bid and lmod in bid
def is_ijcyr_branch (bid):
    return imod in bid and lmod not in bid
def is_ijlat_branch (bid):
    return imod in bid and lmod in bid
def is_cyr_branch (bid):
    return lmod not in bid
def is_lat_branch (bid):
    return lmod in bid

def is_docbook_cat (cname, csubdir):
    return "manual" in cname
def is_not_docbook_cat (cname, csubdir):
    return not is_docbook_cat(cname, csubdir)

def is_manpage_cat (cname, csubdir):
    return "manpage" in cname

def is_wesnoth_cat (cname, csubdir):
    return (    not is_docbook_cat(cname, csubdir)
            and not is_manpage_cat(cname, csubdir))

# ----------------------------------------

# Additional hooks on gathered messages.
S.hook_on_gather_msg_branch.extend([
    # Convert from embedded to proper context.
    (hook_embedded_to_msgctxt, r"", is_wesnoth_cat),
])

# Catalogs where UI strings may be found.
uicpaths = collect_catalogs(S.relpath("catalogs"),
                            selectf=lambda x: "manual" not in x)

# Additional hooks on scattered translations.
S.hook_on_scatter_msgstr.extend([

    # Resolve references to UI strings.
    # -> at start (to apply all of the rest to resolved string too)
    (resolve_ui(uicpaths=uicpaths), "", is_not_docbook_cat),
    (resolve_ui_docbook4(uicpaths=uicpaths), "", is_docbook_cat),

    # Resolve accent graphs.
    # -> before dehybridization (accented letters need transliteration too)
    (hook_resolve_agraphs,),

    # Dehybridize.
    (hook_to_ekcyr, is_ekcyr_branch),
    (hook_to_eklat, is_eklat_branch),
    (hook_to_ijcyr, is_ijcyr_branch),
    (hook_to_ijlat, is_ijlat_branch),

    # Limit character set of man pages.
    # -> after dehybridization (to avoid tripping on reflex ticks)
    (hook_limit_to_isocyr, is_cyr_branch, is_manpage_cat),
    (hook_limit_to_isolat, is_lat_branch, is_manpage_cat),
])

# Additional hooks on scattered messages.
S.hook_on_scatter_msg.extend([
    # Convert from proper to embedded context.
    (hook_msgctxt_to_embedded, r"", is_wesnoth_cat),
])

# Additional hooks on scattered catalogs.
S.hook_on_scatter_cat.extend([
    # Remove obsolete messages.
    (hook_remove_obsolete,),
])

# Set hooks on scattered branch catalog files.
S.hook_on_scatter_file.extend([
    # Check strict gettext-correctness of modified catalogs.
    (msgfmt(options=["--check"]),),
    # Canonically format modified catalogs.
    (msgfilter(["cat"]),),
])
